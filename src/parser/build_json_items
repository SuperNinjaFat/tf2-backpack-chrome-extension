#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""

"""
import json
from functools import partial
from source_text import parse

sample = u"""
{
    "35" : {
	"description" : "The Kritzkrieg",
	"type"        : "Medi Gun",
	"alt"         : "ÜberCharge grants 100% critical chance",
	"plus"        : "+25% ÜberCharge rate",
	"minus"       : ""
    },
    "36" : {
	"description" : "The Blutsauger",
	"type"        : "Syringe Gun",
	"alt"         : "",
	"plus"        : "+3 Health on hit",
	"minus"       : "-2 Health per second"
    },

"""

def proto():
    p =  dict.fromkeys(('description', 'type', 'alt'), '')
    p.update({'positive':[], 'negative':[]})
    return p


known_subs = (
    ('Flaregun', 'FlareGun'),
    # Flamethrower used by achievement so it's not fixed
    ('TF_Weapon_Flamethrower', 'TF_Weapon_FlameThrower'),
    )


def fix_key(v):
    if v.startswith('#'):
	v = v[1:]
	for find, repl in known_subs:
	    v = v.replace(find, repl)
    return v

def fix_type(v):
    if v == 'CheatDetector':
	return 'Cheat Detector'
    if v == 'TF_Wearable_Hat':
	return 'Hat'
    return 'MMM ' + v


def fix_attr(v):
    if v.startswith('#'):
	v = v[1:]
    return v


def find_attribute(attrs, name):
    for value in attrs.itervalues():
	if value['name'] == name:
	    return value


def main():
    output = {}
    items = parse('items_game.txt')['items_game']
    items, qualities, attributes = items['items'], items['qualities'], items['attributes']
    lang_data = parse('tf_english.txt')['lang']['Tokens']
    find_attr = partial(find_attribute, attributes)

    for key in items:
	item = items[key]
	output[key] = fill = proto()

	## item type
	item_type_name = fix_key(item['item_type_name'])
	try:
	    fill['type'] = lang_data[item_type_name]
	except (KeyError, ):
	    fill['type'] = fix_type(item_type_name)

	## item name
	item_name = fix_key(item['item_name'])
	try:
	    fill['description'] = lang_data[item_name]
	except (KeyError, ):
	    fill['description'] = 'NNN ' + item_name


	## item description
	item_desc = item.get('item_description', None)
	if item_desc is not None:
	    item_desc = fix_key(item_desc)
	    try:
		fill['alt'] = lang_data[item_desc]
	    except (KeyError, ):
		fill['alt'] = 'PPP ' + item_desc

	attrs = item.get('attributes', None)
	if attrs is not None:
	    for name, setup in attrs.items():
		av = find_attr(name)
		if av is not None:
		    desc = fix_attr(av['description_string'])
		    av_val = setup.get('value', '0')
		    #, setup.get('min_value'), setup.get('max_value')
		    av_type = av['effect_type']
		    desc = lang_data.get(desc, None)
		    if desc is not None:
			if av_type == 'neutral':
			    fill['alt'] += desc
			elif av_type == 'negative':
			    val = -float(av_val) + 1
			    try:
				desc = desc % val
			    except (TypeError, ):
				pass
			    fill[av_type].append(desc)
			elif av_type == 'positive':
			    val = 100 - (100*float(av_val))
			    try:
				desc = desc % val
			    except (TypeError, ):
				pass
			    fill[av_type].append(desc)

			    pass
			    #fill[av_type].append((av_val, desc))


    return output

if __name__ == '__main__':
    result = main()
    print json.dumps(result, indent=4)

